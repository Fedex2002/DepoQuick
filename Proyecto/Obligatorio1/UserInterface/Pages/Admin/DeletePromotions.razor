@page "/DeletePromotions"


@using Controllers.Dtos


@using Controllers.Interfaces


@layout MainLayout

@inject IPromotionController PromotionController
@inject IStorageUnitController StorageUnitController


<PageTitle>DepoQuick</PageTitle>

<section class="vh-75">
    <div class="container">
        <h2 class="mt-5 mb-4">Delete Promotions</h2>
        <div class="row">
            <div class="col-md-12">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Promotion Label</th>
                            <th>Discount</th>
                            <th>Date Start</th>
                            <th>Date End</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (_promotions.Count == 0)
                        {
                            <tr>
                                <td colspan="5">No promotions found</td>
                            </tr>
                        }
                        else
                        {
                            @foreach (var promotion in _promotions)
                            {
                                <tr>
                                    <td>@promotion.Label</td>
                                    <td>@promotion.Discount%</td>
                                    <td>@promotion.DateStart.ToShortDateString()</td>
                                    <td>@promotion.DateEnd.ToShortDateString()</td>
                                    <td>
                                        <button type="button" class="btn btn-danger" @onclick="() => HandleValidSubmit(promotion.Label)">Delete</button>
                                    </td>
                                </tr>
                            }
                        }
                     </tbody>
                </table>
            </div>
        </div>
    </div>
</section>

@if (_showAdminErrorModal)
{
  <AuthenticationModal
    Title="Promotion does not exist"
    Text="@_errorMessage"
    DialogType=AuthenticationModal.ModalDialogType.Ok
    OnClose="@ClosePromotionErrorModal">
  </AuthenticationModal>
}
@if(_showAdminConfirmationModal)
{
    <AuthenticationModal 
      Title="Promotion deleted successfully"
      Text="Promotion deleted successfully"
      DialogType=AuthenticationModal.ModalDialogType.Ok
      OnClose="@ClosePromotionConfirmationModal">
    </AuthenticationModal>
}

@code {
    PromotionDto _promotionDto;
    private List<PromotionDto> _promotions;
    private bool _showAdminErrorModal = false;
    private string _errorMessage = "";
    private bool _showAdminConfirmationModal = false;
    
    protected override void OnInitialized()
    {
        _promotionDto = new PromotionDto();
        _promotions = PromotionController.GetPromotionsDto();
    }
    
    private async Task HandleValidSubmit(string label)
    {
        try
        {
            _promotionDto = PromotionController.GetPromotionDtoFromLabel(label);
            PromotionController.RemovePromotion(_promotionDto);
            StorageUnitController.DeletePromotionFromAllStorageUnits(_promotionDto);
            _showAdminConfirmationModal = true;
            _promotions = PromotionController.GetPromotionsDto();
        }
        catch (Exception e)
        {
            _showAdminErrorModal = true;
            _errorMessage = e.Message;
        }
    }
    
    private void ClosePromotionErrorModal()
    {
        _showAdminErrorModal = false;
    }
  
    private void ClosePromotionConfirmationModal()
    {
        _showAdminConfirmationModal = false;
    }
}