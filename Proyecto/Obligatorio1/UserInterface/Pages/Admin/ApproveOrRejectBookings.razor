@page "/ApproveOrRejectBookings"
@using Logic
@using Logic.DTOs
@layout MainLayout
@inject AdministratorLogic administratorLogic
@inject NavigationManager NavigationManager

<PageTitle>DepoQuick</PageTitle>

<section class="vh-75">
    <div class="container-fluid h-custom">
        <div class="row d-flex justify-content-center align-items-center h-75">
            <div class="col-md-8 col-lg-6 col-xl-4 offset-xl-1">
                <form>
                    <div class="divider d-flex align-items-center my-4">
                        <p class="text-center fw-bold mx-3 mb-0 fs-4" style="display: inline-block">Approve Or Reject Bookings</p>
                    </div>
                    <div data-mdb-input-init class="form-outline mb-2">
                        <select multiple class="form-select form-select-lg" @bind="selectedBooking" required>
                            @foreach (var user in allUsers)
                            {
                                foreach (var booking in user.Bookings)
                                {
                                    <option value="@booking">@user.Name - @booking.DateStart.ToShortDateString() to @booking.DateEnd.ToShortDateString()</option>
                                }
                            }
                        </select>
                        <label class="form-label">Bookings</label>
                    </div>
                    @if (!showRejectInput)
                    {
                        <div class="text-center text-lg-start pt-2">
                            <button type="button" class="btn btn-primary btn-lg" style="padding-left: 2.5rem; padding-right: 2.5rem;" @onclick="ToggleRejectInput">Reject the Booking</button>
                        </div>
                        <div class="text-center text-lg-start pt-2">
                            <button type="button" class="btn btn-primary btn-lg" style="padding-left: 2.5rem; padding-right: 2.5rem;" @onclick="AcceptBooking">Accept the Booking</button>
                        </div>
                    }
                    @if (showRejectInput) 
                    {
                        <div data-mdb-input-init class="form-outline mt-2 mb-2">
                            <input type="text" class="form-control form-control-lg" placeholder="Reason for rejection" @bind="RejectionReason" required/>
                            <label class="form-label">Rejection</label>
                        </div>
                        <div class="text-center text-lg-start pt-2">
                            <button type="button" class="btn btn-primary btn-lg" style="padding-left: 2.5rem; padding-right: 2.5rem;" @onclick="() => RejectBooking(RejectionReason)">Confirm the Rejection</button>
                        </div>
                        <p class="small fw-bold mt-2 pt-1 mb-0">Changed your decision? <a href="#" @onclick="RefreshPage" class="link-danger">Go Back</a></p>
                    }
                </form>
            </div>
        </div>
    </div>
</section>

@if (showAdminErrorModal)
{
  <AuthenticationModal
    Title="Booking error"
    Text="@errorMessage"
    DialogType=AuthenticationModal.ModalDialogType.Ok
    OnClose="@ClosePromotionErrorModal">
  </AuthenticationModal>
}
@if(showAdminConfirmationModal)
{
    <AuthenticationModal 
      Title="@Message"
      Text="@Message"
      DialogType=AuthenticationModal.ModalDialogType.Ok
      OnClose="@ClosePromotionConfirmationModal">
    </AuthenticationModal>
}

@code {
    private bool showRejectInput = false;
    private List<UserDto> allUsers = new List<UserDto>();
    private BookingDto selectedBooking;
    private string RejectionReason;
    private bool showAdminErrorModal = false;
    private string Message = "";
    private string errorMessage = "";
    private bool showAdminConfirmationModal = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        allUsers = administratorLogic.GetUsersDto();
    }

    private void ToggleRejectInput()
    {
        showRejectInput = !showRejectInput;
    }
    
    private void AcceptBooking()
    {
        try
        {
            administratorLogic.ApproveBooking(selectedBooking);
            Message = "Booking has been approved successfully!";
            showAdminConfirmationModal = true;
        }
        catch (Exception e)
        {
            showAdminErrorModal = true;
            errorMessage = e.Message;
        }
    }

    private void RejectBooking(string rejectionReason)
    {
        try
        {
            administratorLogic.SetRejectionMessage(selectedBooking, rejectionReason);
            Message = "Booking has been rejected successfully!";
            showAdminConfirmationModal = true;
        }
        catch (Exception e)
        {
            showAdminErrorModal = true;
            errorMessage = e.Message;
        }
    }
    
    private void RefreshPage()
    {
        NavigationManager.NavigateTo("/ApproveOrRejectBookings");
    }
    
    private void ClosePromotionErrorModal()
    {
        showAdminErrorModal = false;
    }
  
    private void ClosePromotionConfirmationModal()
    {
        showAdminConfirmationModal = false;
    }
}