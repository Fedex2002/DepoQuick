@page "/ApproveOrRejectBookings"
@using Logic
@using Logic.DTOs
@layout MainLayout
@inject UserLogic userLogic
@inject AdministratorLogic administratorLogic
@inject NavigationManager NavigationManager

<PageTitle>DepoQuick</PageTitle>

<section class="vh-75">
    <div class="container">
        <div class="d-flex justify-content-between align-items-center mt-5 mb-4">
            <h2 class="mb-0">Approve or Reject Bookings</h2>
            <button type="button" class="btn btn-primary btn-lg">Export Bookings Report</button>
        </div>
        <div class="row">
            <div class="col-md-12">
                <table class="table table-striped">
                    <thead>
                    <tr>
                        <th>StorageUnit data</th>
                        <th>User</th>
                        <th>Total Price</th>
                        <th>Start Date</th>
                        <th>End Date</th>
                        <th>Status</th>
                        <th></th>
                    </tr>
                    </thead>
                    <tbody>
                    @if (!_hasBookings)
                    {
                        <tr>
                            <td colspan="7">No bookings found</td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var user in _allUsers)
                        {
                            @foreach (var booking in user.Bookings)
                            {
                                <tr>
                                    <td>
                                        <strong>Id:</strong>@booking.StorageUnitDto.Id<br/>
                                        <strong>Area:</strong>@booking.StorageUnitDto.Area<br/>
                                        <strong>Size:</strong>@booking.StorageUnitDto.Size<br/>
                                        <strong>Climatization:</strong>@booking.StorageUnitDto.Climatization<br/>
                                        @foreach (var promotion in booking.StorageUnitDto.Promotions)
                                        {
                                            <div>
                                                <br/>
                                                <p style="margin-bottom: 0;">Promotion</p>
                                                <strong>Label:</strong> @promotion.Label<br/>
                                                <strong>Discount:</strong> @promotion.Discount<br/>
                                                <strong>StartDate:</strong> @promotion.DateStart.ToShortDateString()<br/>
                                                <strong>EndDate:</strong> @promotion.DateEnd.ToShortDateString()<br/>
                                            </div>
                                        }
                                    </td>
                                    <td>
                                        <label class="form-label">@user.Name</label>
                                    </td>
                                    <td>
                                        <label class="form-label">@_totalPrice[booking.StorageUnitDto.Id]</label>
                                    </td>
                                    <td>
                                        <label class="form-label">@_dateStart[booking.StorageUnitDto.Id].ToShortDateString()</label>
                                    </td>
                                    <td>
                                        <label class="form-label">@_dateEnd[booking.StorageUnitDto.Id].ToShortDateString()</label>
                                    </td>
                                    <td>
                                        <label class="form-label">@_status[booking.StorageUnitDto.Id]</label>
                                    </td>
                                    <td>
                                        @if (!_showRejectInput || _selectedBooking != booking)
                                        {
                                            <div class="d-flex flex-column">
                                                <button type="button" class="btn btn-danger mb-2 w-75" style="padding-left: 2.5rem; padding-right: 2.5rem;" @onclick="() => ToggleRejectInput(booking)">Reject the Booking</button>
                                                <button type="button" class="btn btn-success w-75" style="padding-left: 2.5rem; padding-right: 2.5rem;" @onclick="() => AcceptBooking(user, booking)">Accept the Booking</button>
                                            </div>
                                        }
                                        @if (_showRejectInput && _selectedBooking == booking)
                                        {
                                            <div data-mdb-input-init class="form-outline mt-2 mb-2">
                                                <input type="text" class="form-control form-control-lg" placeholder="Reason for rejection" @bind="_rejectionReason" required/>
                                                <label class="form-label">Rejection</label>
                                            </div>
                                            <div class="text-center text-lg-start pt-2">
                                                <button type="button" class="btn btn-primary btn-lg" style="padding-left: 2.5rem; padding-right: 2.5rem;" @onclick="() => RejectBooking(user, booking)">Confirm the Rejection</button>
                                            </div>
                                            <p class="small fw-bold mt-2 pt-1 mb-0">Changed your decision? <a href="#" @onclick="RefreshPage" class="link-danger">Go Back</a></p>
                                        }
                                    </td>
                                </tr>
                            }
                        }
                    }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</section>

@if (_showAdminErrorModal)
{
  <AuthenticationModal
    Title="Booking error"
    Text="@_errorMessage"
    DialogType=AuthenticationModal.ModalDialogType.Ok
    OnClose="@ClosePromotionErrorModal">
  </AuthenticationModal>
}

@if(_showAdminConfirmationModal)
{
    <AuthenticationModal 
      Title="@_message"
      Text="@_message"
      DialogType=AuthenticationModal.ModalDialogType.Ok
      OnClose="@ClosePromotionConfirmationModal">
    </AuthenticationModal>
}

@code {
    private bool _hasBookings = false;
    private bool _showRejectInput = false;
    private List<UserDto> _allUsers = new List<UserDto>();
    private BookingDto _selectedBooking;
    readonly Dictionary<string, DateTime> _dateStart = new Dictionary<string, DateTime>();
    readonly Dictionary<string, DateTime> _dateEnd = new Dictionary<string, DateTime>();
    readonly Dictionary<string, double> _totalPrice = new Dictionary<string, double>();
    readonly Dictionary<string, string> _status = new Dictionary<string, string>();
    private string _rejectionReason = "";
    private bool _showAdminErrorModal = false;
    private string _message = "";
    private string _errorMessage = "";
    private bool _showAdminConfirmationModal = false;
    
    protected override void OnInitialized()
    {
        base.OnInitialized();
        _allUsers = administratorLogic.GetUsersDto();
        foreach (var user in _allUsers)
        {
            foreach (var bookingDto in user.Bookings)
            {
                _totalPrice[bookingDto.StorageUnitDto.Id] = userLogic.CalculateTotalPriceOfBooking(bookingDto);
                _dateStart[bookingDto.StorageUnitDto.Id] = bookingDto.DateStart;
                _dateEnd[bookingDto.StorageUnitDto.Id] = bookingDto.DateEnd; 
                _status[bookingDto.StorageUnitDto.Id] = bookingDto.Status;
            }
            if (user.Bookings.Any())
            {
                _hasBookings = true;
                break;
            }
        }
    }

    private void ToggleRejectInput(BookingDto bookingDto)
    {
        _selectedBooking = bookingDto;
        _showRejectInput = !_showRejectInput;
    }
    
    private void AcceptBooking(UserDto userDto, BookingDto bookingDto)
    {
        try
        {
            administratorLogic.ApproveBooking(userDto, bookingDto);
            OnInitialized();
            _message = "Booking has been approved successfully!";
            _showAdminConfirmationModal = true;
        }
        catch (Exception e)
        {
            _showAdminErrorModal = true;
            _errorMessage = e.Message;
        }
    }

    private void RejectBooking(UserDto userDto, BookingDto bookingDto)
    {
        try
        {
            administratorLogic.SetRejectionMessage(userDto, bookingDto, _rejectionReason);
            OnInitialized();
            _message = "Booking has been rejected successfully!";
            _showAdminConfirmationModal = true;
        }
        catch (Exception e)
        {
            _showAdminErrorModal = true;
            _errorMessage = e.Message;
        }
    }
    
    private void RefreshPage()
    {
        NavigationManager.NavigateTo("/ApproveOrRejectBookings");
    }
    
    private void ClosePromotionErrorModal()
    {
        _showAdminErrorModal = false;
    }
  
    private void ClosePromotionConfirmationModal()
    {
        _showAdminConfirmationModal = false;
    }
}