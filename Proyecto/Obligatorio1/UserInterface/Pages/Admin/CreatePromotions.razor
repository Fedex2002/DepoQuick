@page "/CreatePromotions"
@using Logic
@using Logic.DTOs
@using Logic.Interfaces
@layout MainLayout
@inject IPromotionController PromotionController

<PageTitle>DepoQuick</PageTitle>

<section class="vh-75">
  <div class="container-fluid h-custom">
    <div class="row d-flex justify-content-center align-items-center h-75">
      <div class="col-md-8 col-lg-6 col-xl-4 offset-xl-1">
        <form @onsubmit="HandleValidSubmit">
          <div class="divider d-flex align-items-center my-4">
            <p class="text-center fw-bold mx-3 mb-0 fs-4">Create Promotion</p>
          </div>
          <div data-mdb-input-init class="form-outline mb-2">
            <input class="form-control form-control-lg" placeholder="Enter Label" @bind="_label" required/>
            <label class="form-label" >Label</label>
          </div>
          <div data-mdb-input-init class="form-outline mb-2">
            <input class="form-control form-control-lg" placeholder="Enter discount" @bind="_discount" required/>
            <label class="form-label" >Discount</label>
          </div>
          <div data-mdb-input-init class="form-outline mb-2">
            <input type="date" class="form-control form-control-lg" @bind="_dateStart" required/>
            <label class="form-label" >DateStart</label>
          </div>
          <div data-mdb-input-init class="form-outline mb-2">
            <input type="date" class="form-control form-control-lg" @bind="_dateEnd" required/>
            <label class="form-label" >DateEnd</label>
          </div>
          <div class="text-center text-lg-start pt-2">
            <button type="submit" class="btn btn-primary btn-lg" style="padding-left: 2.5rem; padding-right: 2.5rem;" >Create the Promotion</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</section>

@if (_showAdminErrorModal)
{
  <AuthenticationModal
    Title="Promotion error"
    Text="@_errorMessage"
    DialogType=AuthenticationModal.ModalDialogType.Ok
    OnClose="@ClosePromotionErrorModal">
  </AuthenticationModal>
}
@if(_showAdminConfirmationModal)
{
    <AuthenticationModal 
      Title="Promotion created successfully"
      Text="Promotion created successfully"
      DialogType=AuthenticationModal.ModalDialogType.Ok
      OnClose="@ClosePromotionConfirmationModal">
    </AuthenticationModal>
}

@code {
  PromotionDto _promotionDto;
  private string _label;
  private int _discount;
  private DateTime _dateStart;
  private DateTime _dateEnd;
  private bool _showAdminErrorModal = false;
  private string _errorMessage = "";
  private bool _showAdminConfirmationModal = false;

  protected override void OnInitialized()
  {
      _promotionDto = new PromotionDto();
      _dateStart = DateTime.Today;
      _dateEnd = DateTime.Today;
  }

  private async Task HandleValidSubmit()
  {
    try
    {
      _promotionDto = new PromotionDto(_label, _discount, _dateStart, _dateEnd);
      PromotionController.AddPromotion(PromotionController.CreatePromotion(_promotionDto));
      _showAdminConfirmationModal = true;
    }
    catch (Exception e)
    {
      _showAdminErrorModal = true;
      _errorMessage = e.Message;
    }
  }
  
  private void ClosePromotionErrorModal()
  {
    _showAdminErrorModal = false;
    StateHasChanged();
  }
  
  private void ClosePromotionConfirmationModal()
  {
    _showAdminConfirmationModal = false;
    StateHasChanged();
  }
}