@page "/"
@layout LoginLayout
<<<<<<< HEAD

@using Controllers.Dtos
@using Controllers.Interfaces

=======
@using Controllers.Dtos
>>>>>>> feature/Controller
@inherits LayoutComponentBase

@inject IPersonController PersonController

@inject NavigationManager NavigationManager

<PageTitle>DepoQuick</PageTitle>

<section class="vh-100">
  <div class="container-fluid h-custom">
    <div class="row d-flex justify-content-center align-items-center h-100">
      <div class="col-md-9 col-lg-6 col-xl-5 justify-content-center align-items-center">
        <img src="logo.png" class="img-fluid logo" alt="Logo Depo Quick">
      </div>
      <div class="col-md-8 col-lg-6 col-xl-4 offset-xl-1">
        <form @onsubmit="HandleValidSubmit">
          <div class="divider d-flex align-items-center my-4">
            <p class="text-center fw-bold mx-3 mb-0 fs-4">Register in with:</p>
          </div>
          
          <div data-mdb-input-init class="form-outline mb-2">
            <input class="form-control form-control-lg" placeholder="Enter name" @bind="_name" required/>
            <label class="form-label" >Name</label>
          </div>
          
          <div data-mdb-input-init class="form-outline mb-2">
            <input class="form-control form-control-lg" placeholder="Enter surname" @bind="_surname" required/>
            <label class="form-label" >Surname</label>
          </div>
          
          <div data-mdb-input-init class="form-outline mb-2">
            <input type="email" class="form-control form-control-lg" placeholder="Enter email address" @bind="_email" required/>
            <label class="form-label" >Email address</label>
          </div>
          
          <div data-mdb-input-init class="form-outline mb-2">
            <input type="password" class="form-control form-control-lg" placeholder="Enter password" @bind="_password" required/>
            <label class="form-label" >Password</label>
          </div>
          
          <div data-mdb-input-init class="form-outline mb-2">
            <input type="password" class="form-control form-control-lg" placeholder="Enter password again" @bind="_passwordConfirmation" required/>
            <label class="form-label" >Verify Password</label>
          </div>
          
          <div class="text-center text-lg-start mt-4 pt-2">
            <button type="submit" class="btn btn-primary btn-lg" style="padding-left: 2.5rem; padding-right: 2.5rem;">Register</button>
            <p class="small fw-bold mt-2 pt-1 mb-0">Already have and account? <a href="#" @onclick="GoToLogin" class="link-danger">Login</a></p>
          </div>
        </form>
      </div>
    </div>
  </div>
  <div
    class="footer d-flex flex-column flex-md-row text-center text-md-start justify-content-between py-3 px-4 px-xl-5 bg-warning mt-3">
    <div class="text-white mb-3 mb-md-0">
      Copyright Â© 2023. All rights reserved.
    </div>
  </div>
</section>
@if (_showUserErrorModal)
{
            <AuthenticationModal 
                        Title="Signup Error" 
                        Text="@_errorMessage" 
                        DialogType=AuthenticationModal.ModalDialogType.Ok
                        OnClose="@CloseUserErrorModal">
            </AuthenticationModal>
}


@code {
  private PersonDto? _person;
  private string? _name;
  private string? _surname;
  private string? _email;
  private string? _password;
  private string? _passwordConfirmation;
  private bool _showUserErrorModal;
  private string? _errorMessage;
  protected override void OnInitialized()
  {
    _person = new PersonDto();
    
  }

  private async Task HandleValidSubmit()
  {
    try
    {
      if (_password != _passwordConfirmation)
      {
        PersonController.CheckIfPasswordIsCorrect(_password, _passwordConfirmation);
      }

      if (!PersonController.CheckIfAdminExists())
      {
        _person = new PersonDto(_name, _surname, _email, _password,true);


        PersonController.SignUp(_person);

      }
      else
      {
        _person = new PersonDto(_name, _surname, _email, _password, false);
        PersonController.SignUp(_person);
      }
      
      GoToLogin();
    }
    catch (Exception e)
    {
      _showUserErrorModal = true;
      _errorMessage = e.Message;
    }
  }

  private void CloseUserErrorModal()
  {
    _showUserErrorModal = false;
  }
  
  private void GoToLogin()
  {
    NavigationManager.NavigateTo("/Login");
  }
    
}