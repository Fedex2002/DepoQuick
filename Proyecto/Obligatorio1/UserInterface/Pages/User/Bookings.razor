@page "/Bookings"
@using Logic
@using Logic.DTOs
@layout MainLayout
@inject UserLogic userLogic
@inject SessionLogic sessionLogic
@inject StorageUnitLogic storageUnitLogic

<PageTitle>DepoQuick</PageTitle>

<section class="vh-75">
    <div class="container">
        <h2 class="mt-5 mb-4">Bookings</h2>
        <div class="row">
            <div class="col-md-12">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>StorageUnit data</th>
                            <th>Price per day</th>
                            <th>Start Date</th>
                            <th>End Date</th>
                            <th>Total Price</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var storageUnit in _storageUnits)
                        {
                             <tr>
                                 <td>
                                     <strong>Id:</strong>@storageUnit.Id<br/>
                                     <strong>Area:</strong>@storageUnit.Area<br/>
                                     <strong>Size:</strong>@storageUnit.Size<br/>
                                     <strong>Climatization:</strong>@storageUnit.Climatization<br/>
                                     @foreach (var promotion in storageUnit.Promotions)
                                     {
                                         <div>
                                             <br/>
                                             <p style="margin-bottom: 0;">Promotion</p>
                                             <strong>Label:</strong> @promotion.Label<br/>
                                             <strong>Discount:</strong> @promotion.Discount<br/>
                                             <strong>StartDate:</strong> @promotion.DateStart<br/>
                                             <strong>EndDate:</strong> @promotion.DateEnd<br/>
                                         </div>
                                     }
                                 </td>
                                 <td>
                                     <label class="form-label">$@_pricePerDay[storageUnit.Id]</label>
                                 </td>
                                 <td>
                                     <div data-mdb-input-init class="form-outline mb-2">
                                         <input type="date" class="form-control form-control-lg" @bind="_dateStart[storageUnit.Id]" required/>
                                     </div>
                                 </td>
                                 <td>
                                     <div data-mdb-input-init class="form-outline mb-2">
                                         <input type="date" class="form-control form-control-lg" @bind="_dateEnd[storageUnit.Id]" required/>
                                     </div>
                                 </td>
                                 <td>
                                     <div>
                                         <label class="form-label">$@_totalPrice[storageUnit.Id]</label>
                                     </div>
                                 </td>
                                 <td>
                                     <button type="button" class="btn btn-primary mb-2" @onclick="() => SetTotalPrice(storageUnit)">Calculate Total Price</button><br/>
                                     <button type="button" class="btn btn-success" @onclick="() => HandleValidSubmit(storageUnit)">Select Storage Unit</button>
                                 </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</section>

@if (_showUserErrorModal)
{
  <AuthenticationModal
    Title="Booking error"
    Text="@_errorMessage"
    DialogType=AuthenticationModal.ModalDialogType.Ok
    OnClose="@CloseBookingErrorModal">
  </AuthenticationModal>
}
@if(_showUserConfirmationModal)
{
    <AuthenticationModal 
      Title="Booking selected successfully"
      Text="Booking selected successfully"
      DialogType=AuthenticationModal.ModalDialogType.Ok
      OnClose="@CloseBookingConfirmationModal">
    </AuthenticationModal>
}

@code {
    BookingDto _bookingDto;
    UserDto _userDto;
    readonly Dictionary<string, DateTime> _dateStart = new Dictionary<string, DateTime>();
    readonly Dictionary<string, DateTime> _dateEnd = new Dictionary<string, DateTime>();
    readonly Dictionary<string, double> _pricePerDay = new Dictionary<string, double>();
    readonly Dictionary<string, double> _totalPrice = new Dictionary<string, double>();
    private List<StorageUnitDto> _storageUnits;
    private bool _showUserErrorModal;
    private string _errorMessage = "";
    private bool _showUserConfirmationModal;
    
    protected override void OnInitialized()
    {
        _bookingDto = new BookingDto();
        _storageUnits = storageUnitLogic.GetStorageUnitsDto();
        foreach (var storageUnitDto in storageUnitLogic.GetStorageUnitsDto())
        {
            _pricePerDay[storageUnitDto.Id] = userLogic.CalculateStorageUnitPricePerDay(storageUnitDto);
            _dateStart[storageUnitDto.Id] = DateTime.Today;
            _dateEnd[storageUnitDto.Id] = DateTime.Today;
            _totalPrice[storageUnitDto.Id] = 0;
        }
    }

    private async Task HandleValidSubmit(StorageUnitDto storageUnitDto)
    {
        try
        {
            if (_totalPrice[storageUnitDto.Id] == 0)
            {
                _showUserErrorModal = true;
                _errorMessage = "Please calculate the total price before selecting the storage unit";
            }
            else
            {
                DateTime finalDateStart = _dateStart[storageUnitDto.Id];
                DateTime finalDateEnd = _dateEnd[storageUnitDto.Id];
                _bookingDto = new BookingDto(false, finalDateStart, finalDateEnd, storageUnitDto, "");
                if (sessionLogic.CurrentPerson is UserDto userDto)
                {
                    userLogic.AddBookingToUser(userDto, _bookingDto);
                    userDto.Bookings.Add(_bookingDto);
                    _showUserConfirmationModal = true;
                }
            }
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
            _showUserErrorModal = true;
        }
    }

    private void SetTotalPrice(StorageUnitDto storageUnitDto)
    {
        try
        {
            DateTime finalDateStart = _dateStart[storageUnitDto.Id];
            DateTime finalDateEnd = _dateEnd[storageUnitDto.Id];
            _bookingDto = new BookingDto(false, finalDateStart, finalDateEnd, storageUnitDto, "");
            _totalPrice[storageUnitDto.Id] = userLogic.CalculateTotalPriceOfBooking(_bookingDto);
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
            _showUserErrorModal = true;
        }
    }

    private void CloseBookingErrorModal()
    {
        _showUserErrorModal = false;
    }

    private void CloseBookingConfirmationModal()
    {
        _showUserConfirmationModal = false;
    }
}